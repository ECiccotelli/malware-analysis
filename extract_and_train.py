import glob
import os
import json
import pandas as pd
from pandas import ExcelWriter


#Gets the "apistats" of a file and returns a dictionary containing the key:value pairs
#key = api call: value = number of api calls
def getApiStats(fileName):

    try:
        data = json.load(fileName)
        t = data['behavior']['apistats']

        apiStatDict = {}
        for x in t:
            for l in t[x]:
                apiName = str(l)
                apiValue = t[x][l]
                if apiName not in apiStatDict.keys():
                    apiStatDict[apiName] = apiValue
                else:
                    apiStatDict[apiName] += apiValue

        return apiStatDict
    except:
        print("Error parsing api stats with file " + str(fileName))
        return -1


#Removes any duplicates from a list
def removeDuplicates(arr):
    return list(dict.fromkeys(arr))


completeCallList = [] #Holds all API calls for every file (each key will be a row in the table created) using a dict to remove duplicates #COLUMNS
allFilesList = [] #Holds all data for each file, each element is a dictionary
malwareList = [] #Holds row that determines if a file is malware (1) or not (0) #LAST COLUMN?
count = 0
bcount = 0
for file in glob.glob('C:/Users/eman2/Documents/VSC Projects/VSC Python Projects/TA Work/newreps/*.json'):
    with open(file) as f:
        returnedDict = getApiStats(f)
        if returnedDict == -1:
            continue

        if "benign" in file.lower():
            bcount+=1
            malwareList.append(0)
        else:
            malwareList.append(1)
        allFilesList.append(returnedDict)
        callList = list(dict.fromkeys(returnedDict))



        for element in callList:
            completeCallList.append(element)

    count+=1


#completeCallList contains all calls from every file (column headers in table)
completeCallList = removeDuplicates(completeCallList)


print("Checking api calls and compiling lists")

#Goal: For each malware sample, have a row. columns as API calls
finishedRows = []
count = 0
for fileDict in allFilesList:
    
    temp = []
    for apiCall in completeCallList:

        if apiCall in fileDict.keys():
            temp.append(fileDict[apiCall])
        else:
            temp.append(0)

    finishedRows.append(temp)
    count+=1

print("Lists complete")

print("Building DataFrame table")

df = pd.DataFrame(columns=completeCallList)

count = 0
for malwareSampleData in finishedRows:
    df.loc[count] = malwareSampleData
    count+=1

df['Malware'] = malwareList
print(df)

from sklearn.model_selection import train_test_split
X = df.drop('Malware', axis=1)  
y = df['Malware'] 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.50, random_state = 2020, stratify=y)


from IPython.display import display

import numpy as np
from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X_train_scaled = ss.fit_transform(X_train)
X_test_scaled = ss.transform(X_test)
y_train = np.array(y_train)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import recall_score
rfc = RandomForestClassifier()
rfc.fit(X_train_scaled, y_train)
#display(rfc.score(X_train_scaled, y_train))


#Fitting model, getting accuracy
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

model  = RandomForestClassifier(random_state=1)
model.fit(X_train, y_train)

yhat = model.predict(X_test)

acc = accuracy_score(y_test, yhat)
print('Accuracy: %.3f' % acc)

import seaborn as sns
import matplotlib.pyplot as plt
feats = {}
for feature, importance in zip(df.columns, rfc.feature_importances_):
    feats[feature] = importance
importances = pd.DataFrame.from_dict(feats, orient='index').rename(columns={0: 'Gini-Importance'})
importances = importances.sort_values(by='Gini-Importance', ascending=False)
importances = importances.reset_index()
importances = importances.rename(columns={'index': 'Features'})
sns.set(font_scale = 5)
sns.set(style="whitegrid", color_codes=True, font_scale = 1.7)
fig, ax = plt.subplots()
fig.set_size_inches(30,15)
sns.barplot(x=importances['Gini-Importance'], y=importances['Features'], data=importances, color='skyblue')
plt.xlabel('Importance', fontsize=25, weight = 'bold')
plt.ylabel('Features', fontsize=25, weight = 'bold')
plt.title('Feature Importance', fontsize=25, weight = 'bold')
display(plt.show())
display(importances)